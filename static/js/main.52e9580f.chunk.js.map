{"version":3,"sources":["icons/logo.svg","components/Authorization/Autorization.jsx","components/Board/Board.jsx","components/Game/Game.jsx","App.jsx","index.js"],"names":["Authorization","className","src","logo","alt","type","placeholder","React","memo","Board","handleClickChoose","shuffledCollors","count","map","color","value","onClick","data-button-number","Math","random","Game","useState","buttonCollor","setButtonCollor","buttonText","setButtonText","setShuffledCollors","useEffect","getShuffledCollors","arr","j","temp","arrCopy","i","length","floor","shuffle","divider","colors","args","Error","forEach","element","concat","repeat","trim","split","customFill","checkedFields","getCollorsCount","Set","field","size","useCallback","event","classes","target","classList","id","dataset","buttonNumber","pattern","toggle","includes","test","push","targetIndex","findIndex","splice","style","backgroundColor","remove","App","path","exact","Autorization","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52e9580f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.88baa581.svg\";","import React from 'react';\n\nimport logo from '../../icons/logo.svg';\n\nimport './Authorization.scss';\nimport '../blocks/button.scss';\n\nconst Authorization = () => (\n  <div className=\"authorization\">\n    <img\n      src={logo}\n      alt=\"logo\"\n      className=\"authorization__logo\"\n    />\n\n    <p>\n      Введите своё имя\n    </p>\n\n    <input\n      type=\"text\"\n      placeholder=\"Имя\"\n      className=\"authorization__login-field\"\n    />\n\n    <button\n      type=\"button\"\n      className=\"authorization__button button\"\n    >\n      Продолжить\n    </button>\n  </div>\n);\n\nexport default React.memo(Authorization);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Board.scss';\n\nconst Board = ({ handleClickChoose, shuffledCollors }) => {\n  let count = 0;\n\n  const setButtonNumber = () => {\n    count += 1;\n\n    return count;\n  };\n\n  return (\n    <div className=\"Board\">\n      {shuffledCollors.map((color) => (\n        <button\n          key={Math.random()}\n          type=\"button\"\n          className={`${color} Board__field`}\n          value={color}\n          onClick={handleClickChoose}\n          data-button-number={setButtonNumber()}\n        />\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  handleClickChoose: PropTypes.func.isRequired,\n  shuffledCollors: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default React.memo(Board);\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport logo from '../../icons/logo.svg';\nimport Board from '../Board/Board';\n\nimport './Game.scss';\n\nconst Game = () => {\n  const [buttonCollor, setButtonCollor] = useState('#787878');\n  const [buttonText, setButtonText] = useState('Проверить');\n  const [shuffledCollors, setShuffledCollors] = useState([]);\n\n  useEffect(() => {\n    // eslint-disable-next-line no-use-before-define\n    setShuffledCollors(getShuffledCollors());\n  }, []);\n\n  const customFill = (divider = ' ', ...args) => {\n    let colors = [];\n\n    if (args.length !== 5) {\n      throw new Error('Should be 5 colors!');\n    }\n\n    args.forEach((element) => {\n      colors = colors.concat((element + divider).repeat(5).trim().split(divider));\n    });\n\n    return colors;\n  };\n\n  function shuffle(arr) {\n    let j;\n    let temp;\n\n    const arrCopy = [...arr];\n\n    for (let i = arrCopy.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = arrCopy[j];\n      arrCopy[j] = arrCopy[i];\n      arrCopy[i] = temp;\n    }\n\n    return arrCopy;\n  }\n\n  const getShuffledCollors = () => (\n    shuffle(customFill(' ', 'green', 'red', 'blue', 'pink', 'orange'))\n  );\n\n  const checkedFields = [];\n\n  const getCollorsCount = () => new Set(\n    checkedFields.map((field) => field.value),\n  ).size;\n\n  const handleClickChoose = (event) => {\n    const classes = event.target.classList;\n    const field = event.target;\n    const id = field.dataset.buttonNumber;\n    const pattern = /(red )|(green )|(blue )|(pink )|(orange )/g;\n\n    classes.toggle('Board__field--checked');\n\n    if (classes.value.includes('Board__field--checked')) {\n      if (pattern.test(classes.value)) {\n        checkedFields.push(field);\n      }\n    } else if (pattern.test(classes.value)) {\n      const targetIndex = checkedFields.findIndex(\n        (element) => element.dataset.buttonNumber === id,\n      );\n      checkedFields.splice(targetIndex, 1);\n    }\n\n    if (checkedFields.length >= 2 && getCollorsCount() === 1) {\n      setButtonCollor('#2562FF');\n      setButtonText('Проверить');\n    }\n  };\n\n  const handleClickCheck = () => {\n    if (checkedFields.length > 1) {\n      const color = checkedFields[0].value.split(' ')[0];\n      const colorsCount = getCollorsCount();\n\n      if (colorsCount > 1) {\n        setButtonCollor('#FF0000');\n        setButtonText('Ошибка');\n      } else {\n        checkedFields.map((field) => field.classList.remove(color));\n        checkedFields.length = 0;\n      }\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <img\n        src={logo}\n        alt=\"\"\n        className=\"Game__logo\"\n      />\n\n      <button\n        className=\"button button--shuffle\"\n        type=\"button\"\n        onClick={useCallback(\n          () => setShuffledCollors(getShuffledCollors()),\n        )}\n      >\n        Перемешать\n      </button>\n\n      <div className=\"Game__timer\">\n        10:30\n      </div>\n\n      <Board\n        handleClickChoose={handleClickChoose}\n        shuffledCollors={shuffledCollors}\n      />\n\n      <button\n        style={{\n          backgroundColor: buttonCollor,\n        }}\n        type=\"button\"\n        className=\"button Game__button-check\"\n        onClick={handleClickCheck}\n      >\n        {buttonText}\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"button Game__button-complete\"\n      >\n        Завершить\n      </button>\n    </div>\n  );\n};\n\nexport default React.memo(Game);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Autorization from './components/Authorization/Autorization';\nimport Game from './components/Game/Game';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/game\">\n        <Game />\n      </Route>\n\n      <Route path=\"/\" exact>\n        <Autorization />\n      </Route>\n\n      <p>page not found</p>\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.scss';\n\nimport App from './App';\n\nReactDOM.render(\n  // eslint-disable-next-line react/jsx-filename-extension\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}